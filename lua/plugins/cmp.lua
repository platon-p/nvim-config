local cmp = require('cmp')
local lspkind = require('lspkind')
local luasnip = require 'luasnip'

cmp.setup {
    autocomplete = false,
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },                -- LSP üëÑ
        { name = 'nvim_lua' },                -- nvim lua api
        { name = 'nvim_lsp_signature_help' }, -- –ü–æ–º–æ—â—å –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –º–µ—Ç–æ–¥–∞—Ö üöÅ
        { name = 'luasnip' },                 -- Luasnip üêå
        { name = 'path' },                    -- –ü—É—Ç–∏ ü™§
        { name = "emoji" },                   -- –≠–º–æ–¥–∑–∏ üò≥
    }, {}),
    formatting = {
        format = lspkind.cmp_format({
            -- show only symbol annotations
            mode = 'symbol',

            -- prevent the popup from showing more
            -- than provided characters (e.g 50 will not show more than 50 characters)
            maxwidth = 50,

            -- when popup menu exceed maxwidth, the truncated part
            -- would show ellipsis_char instead (must define maxwidth first)
            ellipsis_char = '...',
        })
    },
    snippet = {
        -- REQUIRED - you must specify a snippet engine
        expand = function(args)
            require 'luasnip'.lsp_expand(args.body) -- Luasnip expand
        end,
    },

    -- –ö–ª–∞–≤–∏—à–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ nvim-cmp
    mapping = {
        -- –í—ã–∑–æ–≤ –º–µ–Ω—é –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<CR>'] = cmp.mapping.confirm({ select = true }),
        -- ['<CR>'] = cmp.config.disable,                      -- –Ø –Ω–µ –ª—é–±–ª—é, –∫–æ–≥–¥–∞ –≤–µ—â–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ <Enter>
        ['<C-y>'] = cmp.mapping.confirm({ select = true }), -- –ê –≤–æ—Ç –Ω–∞ <C-y> –≤–ø–æ–ª–Ω–µ –æ–∫

        -- –ò—Å–ø–æ–ª—å–∑—É–µ–º <C-e> –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        ['<C-e>'] = cmp.mapping({
            i = cmp.mapping.abort(), -- –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            c = cmp.mapping.close(), -- –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        }),

        ['<C-n>'] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 'c' }),
        ['<C-p>'] = cmp.mapping(cmp.mapping.select_prev_item(), { 'i', 'c' }),

        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ["<Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_next_item()
                -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable()
                -- they way you will only jump inside the snippet region
            elseif luasnip.expand_or_jumpable() then
                luasnip.expand_or_jump()
            else
                fallback()
            end
        end, { "i", "s" }),

        ["<S-Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
                luasnip.jump(-1)
            else
                fallback()
            end
        end, { "i", "s" }),
    },
}
